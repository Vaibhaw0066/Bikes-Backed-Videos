import time
import requests
import json
import os
from logs import getLogger
import  logging


logger = getLogger()

API_KEY = "v0-V9b0iPNXZPhY8K9zDQh4ufL73uSz9sx3MWdnjR4w"

TOKEN_DEV = "eyJhbGciOiJSUzI1NiIsImtpZCI6IlNLMmNjOWZ4NnBMRXRXTGxGV3pQVVZrRGFiRDFKIiwidHlwIjoiSldUIn0.eyJhbXIiOlsib2F1dGgiXSwiZHJuIjoiRFMiLCJlbWFpbCI6Imt1bWFyLnZhaWJoYXdAY2FyczI0LmNvbSIsImV4cCI6MTczNjc0ODc1NSwiaWF0IjoxNzM1ODg0NzU1LCJpc3MiOiJQMmNjOWZ2VnBYeWNjZDNxN1ZnSkJNNGdJYmFCIiwibmFtZSI6Ikt1bWFyIFZhaWJoYXciLCJyZXhwIjoiMjAyNS0wMS0zMVQwNjoxMjozNVoiLCJzdWIiOiJVMnE5dFR5UVZiUHNiOGUyWWdVdnhZcEE0UDhNIiwidGVuYW50cyI6eyJlZjc1MzRkZS05MzFlLTRjNjgtOTMyZS02MjZkYTEwOTJmMjkiOnsicGVybWlzc2lvbnMiOltdLCJyb2xlcyI6WyJQVUJMSVNIRVIiXX19fQ.D9kpARpKwOqlBSAzXescLWfIRAFbLGxDPXuI6Accx0MLFwpamxxP0Md5xlcDdxNftu4y8WTX9dheJD7lbAh4cS70THYVX7Eq-Ae1rPm5SzFSnl84iO31dGb6E87OjkdmmstR0XEkiuWp1M-uQudfu1WGYMM3Sx7ayAlRd9KW2DlTE7-LycSTVs2A1XAd1N-Qm8iRFqQwLBgX9xQCO0kEDfmhghQSIwGRXD9zpA2NWQ2Pxp9YAzpwZDssqndLTE_Yt0cwetJ98Z7rKLSLKpEMVSaE8nnYQuG8vU54IBY5hOsHq1qYf5FmXU6_MFomKVVZCkqF6UN2faX8NMDPPjaNsQ"
DEV = "https://cms-bike-backend.qac24svc.dev"


TOKEN_PROD = "eyJhbGciOiJSUzI1NiIsImtpZCI6IlNLMmNzd3RwQTFobFlTSzMyUDU2c1U4b1lGQ1AzIiwidHlwIjoiSldUIn0.eyJhbXIiOlsib2F1dGgiXSwiZHJuIjoiRFMiLCJlbWFpbCI6Im1vaGQuYW1hYW4xQGNhcnMyNC5jb20iLCJleHAiOjE3Mzc0NDc0NDYsImlhdCI6MTczNjU4MzQ0NiwiaXNzIjoiUDJjc3d0Zm05Z0lmc0xTWkxKZlI2SXlTNTREeCIsIm5hbWUiOiJNb2hkIEFtYWFuIiwicmV4cCI6IjIwMjUtMDItMDhUMDg6MTc6MjZaIiwic3ViIjoiVTJkRThoOFdpZ1RreGl4WDdkT1c5aTMzSVZGMSIsInRlbmFudHMiOnsiMTUzMmJmYTEtZTNkOC00MmRiLTg5ODctNWFlNWJiNDc5ZGY4Ijp7InBlcm1pc3Npb25zIjpbXSwicm9sZXMiOlsiUFVCTElTSEVSIl19LCI1ZmEzMjRhYi1mODkzLTRkZDItYjZhZS1kODYwNmQ1N2U2YjUiOnsicGVybWlzc2lvbnMiOltdLCJyb2xlcyI6WyJQVUJMSVNIRVIiXX0sIjZiYTdiODEwLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCI6eyJwZXJtaXNzaW9ucyI6W10sInJvbGVzIjpbIlBVQkxJU0hFUiJdfSwiOGM2NGQ5NjYtN2QwNy00NTJjLTg2NTMtY2IzZWIwNGNhNDVhIjp7InBlcm1pc3Npb25zIjpbXSwicm9sZXMiOlsiUFVCTElTSEVSIl19LCI5YzU1YzZiOC1lZTFjLTRhN2YtYThiNC0zYzQxZDRlNGY2NTciOnsicGVybWlzc2lvbnMiOltdLCJyb2xlcyI6WyJQVUJMSVNIRVIiXX0sImJiZTNiZjU1LTMwYjUtNDU5Zi05M2IxLTNjYzU4NzFkYTkyNiI6eyJwZXJtaXNzaW9ucyI6W10sInJvbGVzIjpbIlBVQkxJU0hFUiJdfSwiZTY0ZWM3YTUtNjc0My00OWVhLTk3ZjMtM2MzN2VkOTAyNWJmIjp7InBlcm1pc3Npb25zIjpbXSwicm9sZXMiOlsiUFVCTElTSEVSIl19LCJlZjc1MzRkZS05MzFlLTRjNjgtOTMyZS02MjZkYTEwOTJmMjkiOnsicGVybWlzc2lvbnMiOltdLCJyb2xlcyI6WyJQVUJMSVNIRVIiXX19fQ.bpj-ia5Vzxa4DGwrODY-yKpsCsEQZ-Gfz-qk8haoa63MW49sdd-Z0kbYpjNcs6zaW1l6qiSh5kw8IN_uKHvg1Eu1GHhAm4Q9Y-femZqdt0ltWQb2g6fjbjJBn5do_Qv881usDPPfj_zajLo05Rwij-xE0dUjE34MqSl7eBUCmCgMlwQel5FgHl4_eiCRUfg3hw3rz0L7EoKqzwu9Cuy0oJfXC4BzFkhLuTrZ5-Gdb1QYC1DmwuLzDKBSVN8h4xL-7aEzn4Ncz9KYL6lMOf8GgBKO4QEyF6w6wuhyFrPam8Ts42yRdRGfu3jaaSzHdiv5_d3bAURF-omKSSwouYI_4g"
PROD = "https://cms-bike-backend-prod.cars24.team"

model_video_ids = [
    1,
    101,
    183,
    201,
    418,
    187,
    889,
    890,
    891,
    892,
    89,
    381,
    433,
    479,
    736,
    735,
    893,
    894,
    895,
    896,
    114,
    317,
    371,
    523,
    734,
    79,
    465,
    545,
    837,
    838,
    2,
    88,
    182,
    407,
    1123,
    22,
    248,
    413,
    1053,
    1054,
    6,
    162,
    233,
    310,
    518,
    241,
    253,
    257,
    341,
    363,
    74,
    991,
    992,
    993,
    994,
    80,
    408,
    449,
    457,
    562,
    136,
    294,
    339,
    411,
    1125,
    212,
    237,
    255,
    1059,
    1060,
    17,
    106,
    281,
    356,
    1124,
    382,
    394,
    395,
    436,
    526,
    907,
    908,
    909,
    910,
    911,
    534,
    912,
    913,
    914,
    915,
    177,
    916,
    917,
    918,
    919,
    920,
    932,
    933,
    934,
    935,
    936,
    154,
    937,
    938,
    939,
    940,
    941,
    942,
    943,
    944,
    945,
    961,
    962,
    963,
    964,
    922,
    923,
    924,
    925,
    926,
    977,
    978,
    979,
    980,
    981,
    956,
    957,
    958,
    959,
    960,
    946,
    947,
    948,
    949,
    950,
    965,
    966,
    967,
    968,
    969,
    975,
    976,
    1003,
    970,
    971,
    972,
    973,
    974,
    67,
    438,
    593,
    594,
    595,
    77,
    242,
    265,
    528,
    574,
    293,
    664,
    665,
    666,
    667,
    323,
    431,
    544,
    587,
    588,
    47,
    184,
    442,
    463,
    573,
    25,
    161,
    583,
    584,
    215,
    699,
    700,
    701,
    702,
    90,
    163,
    342,
    617,
    618,
    104,
    207,
    537,
    585,
    586,
    15,
    349,
    443,
    539,
    1116,
    119,
    345,
    535,
    1085,
    1086,
    357,
    428,
    478,
    1083,
    1084,
    155,
    232,
    542,
    576,
    44,
    99,
    267,
    474,
    111,
    138,
    185,
    378,
    414,
    591,
    592,
    166,
    195,
    200,
    226,
    483,
    502,
    536,
    605,
    606,
    607,
    91,
    388,
    558,
    561,
    577,
    229,
    311,
    375,
    512,
    517,
    634,
    635,
    636,
    637,
    156,
    289,
    330,
    338,
    451,
    72,
    100,
    178,
    214,
    41,
    259,
    385,
    402,
    578,
    653,
    654,
    655,
    656,
    102,
    657,
    658,
    659,
    660,
    46,
    121,
    292,
    299,
    355,
    128,
    160,
    168,
    393,
    441,
    649,
    650,
    651,
    652,
    63,
    254,
    266,
    557,
    731,
    197,
    810,
    886,
    887,
    888,
    366,
    420,
    718,
    792,
    793,
    804,
    882,
    883,
    884,
    885,
    276,
    391,
    487,
    567,
    108,
    224,
    368,
    374,
    432,
    231,
    252,
    369,
    569,
    582,
    78,
    471,
    608,
    609,
    610,
    694,
    695,
    696,
    697,
    698,
    261,
    645,
    646,
    647,
    648,
    126,
    308,
    401,
    511,
    115,
    236,
    277,
    437,
    458,
    318,
    546,
    719,
    776,
    777,
    157,
    304,
    427,
    496,
    728,
    54,
    97,
    206,
    745,
    746,
    11,
    240,
    389,
    456,
    521,
    268,
    301,
    306,
    351,
    730,
    53,
    158,
    490,
    497,
    506,
    250,
    324,
    726,
    772,
    773,
    120,
    754,
    755,
    756,
    757,
    550,
    560,
    737,
    743,
    744,
    29,
    85,
    123,
    144,
    444,
    410,
    750,
    751,
    752,
    753,
    16,
    390,
    548,
    732,
    12,
    287,
    373,
    505,
    510,
    213,
    763,
    764,
    765,
    766,
    24,
    66,
    71,
    189,
    448,
    118,
    362,
    370,
    464,
    480,
    488,
    727,
    767,
    768,
    758,
    759,
    760,
    761,
    762,
    309,
    321,
    329,
    397,
    445,
    38,
    135,
    173,
    712,
    68,
    228,
    352,
    485,
    713,
    482,
    818,
    819,
    820,
    821,
    31,
    223,
    721,
    815,
    816,
    169,
    262,
    328,
    434,
    570,
    57,
    316,
    435,
    533,
    817,
    903,
    904,
    905,
    906,
    70,
    131,
    216,
    283,
    422,
    75,
    159,
    525,
    527,
    1108,
    303,
    353,
    470,
    507,
    1112,
    10,
    186,
    315,
    552,
    1107,
    172,
    219,
    379,
    409,
    1109,
    210,
    404,
    982,
    983,
    984,
    36,
    122,
    302,
    462,
    571,
    51,
    282,
    406,
    1087,
    1088,
    3,
    43,
    176,
    460,
    1111,
    396,
    988,
    989,
    990,
    1115,
    296,
    997,
    998,
    999,
    1000,
    69,
    439,
    985,
    986,
    987,
    142,
    217,
    504,
    995,
    996,
    336,
    343,
    538,
    540,
    1114,
    9,
    221,
    426,
    454,
    509,
    386,
    491,
    495,
    1113,
    145,
    273,
    494,
    564,
    1110,
    42,
    1049,
    1050,
    1051,
    1052,
    1004,
    1097,
    1098,
    1099,
    1100,
    831,
    832,
    833,
    834,
    835,
    843,
    844,
    845,
    846,
    847,
    839,
    840,
    876,
    877,
    878,
    863,
    864,
    865,
    866,
    867,
    333,
    868,
    869,
    870,
    871,
    858,
    859,
    860,
    861,
    862,
    872,
    873,
    874,
    875,
    708,
    709,
    710,
    711,
    749,
    853,
    854,
    855,
    856,
    857,
    841,
    842,
    879,
    880,
    881,
    380,
    416,
    516,
    559,
    565,
    125,
    218,
    235,
    399,
    572,
    191,
    461,
    723,
    747,
    748,
    14,
    83,
    715,
    778,
    779,
    143,
    151,
    165,
    278,
    714,
    247,
    274,
    376,
    455,
    473,
    146,
    251,
    264,
    405,
    484,
    13,
    141,
    520,
    784,
    785,
    190,
    205,
    243,
    377,
    425,
    105,
    209,
    280,
    367,
    424,
    508,
    739,
    740,
    741,
    742,
    84,
    116,
    288,
    419,
    568,
    52,
    297,
    319,
    459,
    524,
    59,
    65,
    717,
    780,
    781,
    107,
    134,
    192,
    774,
    775,
    4,
    18,
    167,
    269,
    398,
    26,
    475,
    716,
    782,
    783,
    55,
    359,
    724,
    788,
    789,
    45,
    94,
    279,
    314,
    468,
    234,
    290,
    350,
    466,
    729,
    62,
    92,
    246,
    263,
    563,
    286,
    364,
    421,
    796,
    797,
    40,
    96,
    220,
    529,
    555,
    798,
    799,
    800,
    801,
    56,
    93,
    387,
    417,
    733,
    802,
    803,
    901,
    902,
    117,
    171,
    285,
    1069,
    1070,
    164,
    295,
    312,
    332,
    467,
    270,
    429,
    453,
    522,
    21,
    33,
    150,
    153,
    1118,
    152,
    188,
    194,
    1117,
    5,
    112,
    291,
    354,
    515,
    19,
    28,
    384,
    1120,
    1001,
    1002,
    1101,
    1102,
    1103,
    23,
    238,
    503,
    551,
    1121,
    109,
    139,
    198,
    244,
    1119,
    147,
    320,
    614,
    615,
    616,
    682,
    683,
    684,
    685,
    686,
    196,
    322,
    446,
    447,
    581,
    203,
    638,
    639,
    640,
    641,
    348,
    498,
    705,
    706,
    707,
    124,
    271,
    313,
    347,
    580,
    180,
    211,
    256,
    476,
    501,
    50,
    630,
    631,
    632,
    633,
    130,
    499,
    611,
    612,
    613,
    361,
    601,
    642,
    643,
    644,
    34,
    1073,
    1074,
    1075,
    1076,
    204,
    469,
    556,
    1071,
    1072,
    383,
    1091,
    1092,
    1093,
    1094,
    132,
    230,
    239,
    260,
    481,
    95,
    258,
    489,
    1080,
    1081,
    76,
    137,
    222,
    249,
    344,
    32,
    179,
    1077,
    1078,
    1079,
    7,
    110,
    275,
    298,
    575,
    149,
    477,
    493,
    589,
    590,
    532,
    623,
    624,
    625,
    626,
    678,
    679,
    680,
    681,
    334,
    619,
    620,
    621,
    622,
    82,
    430,
    450,
    599,
    600,
    199,
    358,
    602,
    603,
    604,
    307,
    661,
    662,
    663,
    61,
    627,
    628,
    629,
    692,
    693,
    703,
    704,
    687,
    688,
    689,
    690,
    691,
    1017,
    1018,
    1019,
    1122,
    60,
    346,
    423,
    486,
    579,
    58,
    415,
    492,
    530,
    531,
    8,
    86,
    722,
    786,
    787,
    795,
    897,
    898,
    899,
    900,
    73,
    272,
    720,
    811,
    812,
    37,
    87,
    337,
    813,
    814,
    805,
    806,
    807,
    808,
    809,
    30,
    39,
    170,
    181,
    554,
    113,
    127,
    148,
    284,
    326,
    129,
    513,
    543,
    549,
    500,
    1055,
    1056,
    1057,
    1058,
    1025,
    1026,
    1027,
    1028,
    1029,
    48,
    327,
    738,
    769,
    770,
    771,
    1104,
    1105,
    1106,
    566,
    1038,
    1039,
    1040,
    1041,
    440,
    553,
    596,
    597,
    598,
    20,
    98,
    245,
    335,
    412,
    452,
    519,
    541,
    1061,
    1062,
    300,
    331,
    472,
    1063,
    1064,
    1020,
    1021,
    1022,
    1023,
    1024,
    81,
    133,
    175,
    514,
    794,
    27,
    725,
    790,
    791,
    848,
    849,
    850,
    851,
    852,
    822,
    823,
    824,
    825,
    836,
    826,
    827,
    828,
    829,
    830,
    1010,
    1011,
    1012,
    1013,
    1096,
    193,
    360,
    365,
    1089,
    1090,
    1005,
    1006,
    1007,
    1008,
    1009,
    225,
    1126,
    1127,
    1128,
    1095,
    1082,
    547,
    921,
    400,
    927,
    928,
    929,
    930,
    931,
    951,
    952,
    953,
    954,
    955,
    305,
    1014,
    1015,
    1016,
    340,
    1047,
    1048,
    208,
    1065,
    1066,
    1067,
    1068,
    174,
    227,
    1030,
    1031,
    1032,
    1033,
    1034,
    1035,
    1036,
    1037,
    1042,
    1043,
    1044,
    1045,
    1046,
    668,
    669,
    670,
    671,
    672,
    64,
    202,
    325,
    372,
    673,
    674,
    675,
    676,
    677
]


# File to store the processed model IDs
response_file = 'response.json'
processed_ids_file = "processed_ids.json"

# Load the processed IDs from the file, if it exists
if os.path.exists(response_file):
    with open(response_file, 'r') as f:
        processed_data = json.load(f)
else:
    processed_data = []

# Function to save the processed IDs to a JSON file
def save_processed_data():
    with open(response_file, 'w') as f:
        json.dump(processed_data, f)

if os.path.exists(processed_ids_file):
    with open(processed_ids_file, 'r') as f:
        processed_ids = json.load(f)
else:
    processed_ids = []

# Function to save the processed IDs to a JSON file
def save_processed_ids():
    with open(processed_ids_file, 'w') as f:
        json.dump(processed_ids, f)

# Function to process a model video ID
def process_video(model_id):
    logger.log(logging.INFO,"Started processing video")
    # Step 2: Fetch model video data from the API
    url = f'{PROD}/api/v1/model-video/{model_id}'
    headers = {
        'sec-ch-ua-platform': 'macOS',
        'Authorization': f'Bearer {TOKEN_PROD}',
        'Referer': 'https://mosaic-dev.24c.in/',
        'tenantId': 'ef7534de-931e-4c68-932e-626da1092f29',
        'sec-ch-ua': '"Google Chrome";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
        'sec-ch-ua-mobile': '?0',
        'ngrok-skip-browser-warning': '69420',
        'role': 'PUBLISHER',
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        'Accept': 'application/json, text/plain, */*'
    }

    response = requests.get(url, headers=headers)
    logger.log(logging.INFO,"Prod API Hit")
    if response.status_code == 200:
        data = response.json()["data"]
        youtube_url = data["url"]
        categories = data['categories']

        # Step 3: Use the YouTube URL to trigger the second API (downloading video)
        download_url = "https://mango.sievedata.com/v2/push"
        download_data = {
            "function": "sieve/youtube_to_mp4",
            "inputs": {
                "url": youtube_url,
                "resolution": "highest-available",
                "include_audio": True
            }
        }
        star_time = time.time()
        download_response = requests.post(download_url, json=download_data, headers={
            'Content-Type': 'application/json',
            'X-API-Key': f'{API_KEY}'
        })
        logger.log(logging.INFO,msg=f"Hit_download :=> {download_url}")
        download_response.status_code = 200
        if download_response.status_code == 200:
            download_data = download_response.json()
            job_id = download_data['id']

            # Step 4: Poll the job status until it's finished
            job_status_url = f'https://mango.sievedata.com/v2/jobs/{job_id}'
            for _ in range(100):
                time.sleep(2)
                job_status_response = requests.get(job_status_url, headers={
                    'Content-Type': 'application/json',
                    'X-API-Key': f'{API_KEY}'
                })
                try:
                    if job_status_response.status_code == 200:
                        elapsed_time = time.time() - star_time
                        # logger.log(logging.INFO, msg=f"download-time {elapsed_time:.2f}s")
                        logger.log(logging.INFO, f"Waiting for download... {elapsed_time:.2f}s")

                        job_status_data = job_status_response.json()
                        if job_status_data['status'] == 'finished' and job_status_data['outputs'][0]['data']['url']:
                            output_url = job_status_data['outputs'][0]['data']['url']

                            # Step 5: Process the video URL with the final API
                            process_video_url = "http://13.200.213.33:80/process-videov2"
                            elapsed_time = time.time() - star_time
                            logger.log(logging.INFO, msg=f"download-time {elapsed_time:.2f}s")

                            # logger.log(logging.INFO, str(categories))
                            for category in categories:
                                category_id = category["id"]
                                print(f"categorieID : {category_id}")
                                if category["startTime"] == None or category["endTime"] == None:
                                    response_data = dict()
                                    response_data["categoriesId"] = category_id
                                    response_data["gifId"] = None
                                    response_data["videoId"] = None
                                    processed_data.append(response_data)
                                    logger.log(logging.INFO,f"Skipping video/gif creation for model-id : {model_id} and categoryId : {category_id}")
                                    save_processed_data()
                                    continue
                                time_data = [{"startTime": category['startTime'], "endTime": category['endTime']}]
                                process_data = {
                                    "time": time_data,
                                    "url": output_url,
                                    "modelName": data['model']['name'],
                                    "makeName": data['model']['make']['name'],
                                    "videoName": data['name'],
                                    "mp4Flag": True
                                }
                                logger.log(logging.INFO,f"Hitting video-generation api for categoryId : {category_id}, with time-delta : {process_data['time']}")
                                start_time =  time.time()
                                process_video_response = requests.post(process_video_url, json=process_data, headers={
                                    'authorization': f'Bearer {TOKEN_PROD}',
                                    'content-type': 'application/json',
                                    'tenantid': 'ef7534de-931e-4c68-932e-626da1092f29',
                                    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36'
                                })
                                end_time =  time.time()
                                elapsed_time = end_time-star_time
                                logger.log(logging.INFO,f"Video-processing :=> time-taken : {elapsed_time:.2f}")

                                response_data = dict()
                                response_data["categoriesId"] = category["id"]
                                if process_video_response.status_code == 200:
                                    response_data["videoId"] = process_video_response.json()["data"]["id"]

                                process_data["mp4Flag"] = False

                                # logger.log(logging.INFO,f"Hitting video-generation api with meta-data : {process_data}")
                                start_time =  time.time()
                                process_video_response = requests.post(process_video_url, json=process_data, headers={
                                    'authorization': f'Bearer {TOKEN_PROD}',
                                    'content-type': 'application/json',
                                    'tenantid': 'ef7534de-931e-4c68-932e-626da1092f29',
                                    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36'
                                })
                                end_time =  time.time()
                                elapsed_time  = end_time-star_time
                                logger.log(logging.INFO,f"Gif-processing :=> time taken: {elapsed_time:.2f}s")

                                if process_video_response.status_code == 200:
                                    print(f"Successfully processed video for model ID : {model_id}, categories_id : {category_id}")
                                    # Mark the ID as processed
                                    response_data["gifId"] = process_video_response.json()["data"]["id"]
                                    processed_data.append(response_data)
                                    save_processed_data()

                            processed_ids.append(model_id)
                            save_processed_ids()

                        else:
                            continue
                    else:
                        print(f"Polling failed for job {job_id}")
                        continue
                except Exception as e:
                    logger.log(logging.ERROR, msg=f"Failed to process for model_id {model_id}, error : {e}")
                break
        else:
            logger.log(logging.ERROR, msg=f"Failed to trigger download for model {model_id}")
    else:
        logger.log(logging.ERROR, msg=f"Failed to fetch model video for ID {model_id}, status: {response.status_code}")


# Step 1: Process each model video ID that hasn't been processed yet
for model_id in model_video_ids:
    if int(model_id) not in processed_ids :
        s_t =  time.time()
        print(f"Processing for Model ID {model_id}")
        process_video(model_id)
        end_time =  time.time()
        elapsed_time = end_time - s_t
        logger.log(logging.INFO, f"Time taken to process model-id {model_id}: {elapsed_time:.2f}s")

    else:
        print(f"Model ID {model_id} has already been processed.")
